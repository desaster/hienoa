# Copyright (c) 1999-2001 Upi Tamminen <desaster@dragonlight.fi>
# See the COPYRIGHT file for more information

package away

config_title "Away configuration"
config_entry "Away message" type "text" var "h.cfg.awaymessage" def "gone.."
config_entry "Back message" type "text" var "h.cfg.backmessage" def "hi"
config_entry "Show away message on channels" type "check" var "h.cfg.public_away" def "0"
config_entry "Log messages when away" type "check" var "h.cfg.awaylog_msg" def "1"
config_entry "Log notices when away" type "check" var "h.cfg.awaylog_notice" def "0"
config_entry "Log hilighted public messages when away" type "check" var "h.cfg.awaylog_hilight" def "1"
config_entry "Log DCC events when away" type "check" var "h.cfg.awaylog_dcc" def "0"
config_entry "Set client automatically away if idle" type "check" var "h.cfg.auto_away" def "0"
config_entry "Set client automatically back on public message" type "check" var "h.cfg.auto_back" def "0"
config_entry "Minutes before automatically setting away" type "text" var "h.cfg.auto_away_time" def "15"
config_entry "Change nick on away" type "check" var "h.cfg.away_change_nick" def "0"
config_entry "Nick to use when going away" type "text" var "h.cfg.away_nick" def "MeAway"
config_entry "Set away time in away message" type "check" var "h.cfg.away_timestamp" def "0"
config_entry "Show away message on these channels only" type "wordlist" var "h.cfg.public_away_channels"

eval on #-hook $hash_32bit(away) "config_change" { h.auto_away.init }

if (N && isaway($N)) { @ h.away = 1 }

alias awya away
#     ^^^^  typo
alias setaway away
alias away (h.am default $h.cfg.awaymessage) {
    if (h.cfg.public_away) {
	fe ($myservers(1)) h.s {
	    fe ($mychannels($h.s)) h.c {
		if (h.cfg.public_away_channels && \
			findw($word(1 $h.c) $h.cfg.public_away_channels) < 0) {
	    	    continue
	       	}
		@ :h.m = [PRIVMSG $h.c :ACTION is away, $h.am]
		^xquote -server $h.s $h.m
	    }
	}
	if (C) { shook send_action ... is away, $h.am }
    }
    if (h.cfg.away_change_nick && h.cfg.away_nick && N != h.cfg.away_nick) {
	fe ($uniq($myservers())) h.s {
	    @ h.away_original_nick = N
	    xeval -server $servernum($h.s) nick $h.cfg.away_nick
	}
    }
    @ h.awaytime = time()
    @ h.away = 1
    if (h.cfg.away_timestamp) {
	@ h.am #= [ \(since $stime($time())\)]
    }
    //away -all $h.am
}

alias setback back
alias back (h.bm default $h.cfg.backmessage) {
    if (h.away && h.cfg.public_away) {
	@ :h.bm = [is back, $h.bm \($tdiff2(${time()-h.awaytime})\)]
	fe ($myservers(1)) h.s {
	    fe ($mychannels($h.s)) h.c {
		if (h.cfg.public_away_channels && \
			findw($word(1 $h.c) $h.cfg.public_away_channels) < 0) {
	    	    continue
	       	}
		@ :h.m = [PRIVMSG $h.c :$chr(1)ACTION $h.bm$chr(1)]
		^xquote -server $h.s $h.m
	    }
	}
	if (C) { shook send_action ... $h.bm }
    }
    if (h.away && h.cfg.away_change_nick && h.away_original_nick) {
	fe ($uniq($myservers())) h.s {
	    xeval -server $servernum($h.s) nick $h.away_original_nick
	}
	^assign -h.away_original_nick
    }
    @ h.away = 0
    //away -all
    @ :h.fn = [~/.hienoa/away$pid()]
    if (fexist($h.fn) == 1) {
	xecho -b You have messages.
	xecho -b Use /readlog to read your log, /remlog to delete it.
    }
}

alias remlog {
    @ :h.fn = [~/.hienoa/away$pid()]
    if (fexist($h.fn) > -1) {
	if (unlink($h.fn)) {
	    xecho -b Failed to remove awaylog
	} else {
	    xecho -say -b Awaylog removed
	    @ h.awaycount = 0
	    h.refresh.away
	}
    } else {
	xecho -say -b The awaylog is empty
    }
}

alias readlog {
    @ :h.fn = [~/.hienoa/away$pid()]
    if (fexist($h.fn) == -1) {
	xecho -b The awaylog is empty
	return
    }
    if (:h.f = open($h.fn R)) {
	while (!eof($h.f)) {
	    @ :h.l = read($h.f)
	    if (h.l) { xecho -b $h.l }
	}
    }
    if (h.f) { @ close($h.f) }
}

alias h.awaylog_append (h.m) {
    @ h.awaycount++
    h.refresh.away
    @ :h.f = open(~/.hienoa/away$pid() W)
    @ write($h.f $h.m)
    @ close($h.f)
}

alias h.auto_away.init {
    ^on #-idle $hash_32bit(away) -
    if (!h.cfg.auto_away_time || !isnumber($h.cfg.auto_away_time)) { return }
    ^on #-idle $hash_32bit(away) $h.cfg.auto_away_time {
	if (!h.away && h.cfg.auto_away) {
	    away auto-away after $h.cfg.auto_away_time minutes
	}
    }
}

# vim: set ai tw=75 sw=4:
