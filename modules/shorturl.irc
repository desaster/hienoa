# Copyright (c) 1999-2014 Upi Tamminen <desaster at gmail>
# See the COPYRIGHT file for more information

package shorturl

config_title "URL Shortener"
config_entry "Run the url shortener web server" type "check" var "h.cfg.shorturl_enabled" def "0"
config_entry "Port number" type "text" var "h.cfg.shorturl_port" def "1823"
config_entry "Hostname to display" type "text" var "h.cfg.shorturl_host" def "127.0.0.1"
config_entry "Maximum number of urls to store" type "text" var "h.cfg.shorturl_maxnum" def "100"
config_entry "Always shorten urls regardless of terminal size" type "check" var "h.cfg.shorturl_always" def "0"

@ :h.myhash = hash_32bit(shorturl)

eval on #-hook $h.myhash "config_change" {
    if (h.shorturl.port) {
        h.shorturl.server_stop
    } else {
        ^h.shorturl.server_stop
    }
    if (!h.cfg.shorturl_enabled) return
    h.shorturl.server_start
    @ h.shorturl.last_urlid = 0
}

eval ^on #-public $h.myhash "% % *://*" {
    h.shorturl.process_line $2-
}

eval ^on #-public_msg $h.myhash "% % *://*" {
    h.shorturl.process_line $2-
}

eval ^on #-public_notice $h.myhash "% % *://*" {
    h.shorturl.process_line $2-
}

eval ^on #-public_other $h.myhash "% % *://*" {
    h.shorturl.process_line $2-
}

eval ^on #-server_notice $h.myhash "% % *://*" {
    h.shorturl.process_line $2-
}

eval ^on #-msg $h.myhash "% *://*" {
    h.shorturl.process_line $1-
}

eval ^on #-notice $h.myhash "% *://*" {
    h.shorturl.process_line $1-
}

alias h.shorturl.mock_url (url) {
    @ :url1 = []
    fec ($url) c {
        @ :url1 #= isalpha($c) ? c : [ ]
    }
    @ :url2 = []
    fe ($url1) w {
        if (findw($w http https www) != -1) {
            continue
        }
        @ push(url2 $w)
    }
    return $url2
}

alias h.shorturl.process_line (line) {
    if (!h.cfg.shorturl_enabled) return
    fe ($stripcrap(ALL,ALL_OFF $line)) word {
        if (!rmatch("$word" *://*)) {
            continue
        }
        # the crude definition of a 'long' url:
        if (!h.cfg.shorturl_always && \
                (strlen($word) < (word(0 $geom()) - 10))) {
            continue
        }
        @ h.shorturl.last_urlid++
        if (h.shorturl.last_urlid > h.cfg.shorturl_maxnum) {
            @ :h.remid = (h.shorturl.last_urlid - \
                h.cfg.shorturl_maxnum)
            ^assign -h.shorturl.urls[$h.remid]
        }
        @ h.shorturl.urls[$h.shorturl.last_urlid] = word

        @ :murl = h.shorturl.mock_url($word)

        @ :shorturl = [http://$h.cfg.shorturl_host:$h.shorturl.port/$h.shorturl.last_urlid]
        @ :used = (strlen($stripcrap(ALL,ALL_OFF $getset(BANNER))) + \
            strlen($shorturl) + 8)
        @ :avail = (word(0 $geom()) - used)
        @ :str = [$shorturl \($left($avail $murl)...\)]
        xecho -b $str
    }
}

alias h.shorturl.server_start {
    @ :port = listen($h.cfg.shorturl_port)
    if (port != h.cfg.shorturl_port) {
        xecho -b The URL shortener web server failed to bind to port $h.cfg.shorturl_port
        return
    }
    @ h.shorturl.port = port
    ^on ^dcc_raw "% % % $h.cfg.shorturl_port" {
        ^on ^dcc_raw "$0 % D *" {
            h.shorturl.handle_request $0 $3-
        }
        # timeout
        timer -ref web_$0 20 {
            ^dcc close raw $0
            h.shorturl.connection_cleanup $0
        }
        # the client closed connection
        ^on ^dcc_raw "$0 % C" {
            h.shorturl.connection_cleanup $0
        }
    }
    ^on ^dcc_lost "$h.cfg.shorturl_port RAW_LISTEN raw_listen *" #
    xecho -b URL shortener web server running on port $h.shorturl.port
}

alias h.shorturl.server_stop {
    if (h.shorturl.port) {
        ^dcc close raw_listen $h.shorturl.port
        ^on ^dcc_lost -"$h.shorturl.port RAW_LISTEN raw_listen *"
        ^on ^dcc_raw -"% % % $h.shorturl.port"
        xecho -b URL shortener web server stopped
    } else {
        # Try anyway
        ^dcc close raw_listen $h.cfg.shorturl_port
    }
    ^assign -h.shorturl.port
}

alias h.shorturl.handle_request (fd, data) {
    if (word(0 $data) == [GET]) {
        @ :path = word(1 $data)
        @ :urlid = pass(1234567890 $path)
        if (strlen($h.shorturl.urls[$urlid])) {
            h.shorturl.send_url $fd $h.shorturl.urls[$urlid]
        } else {
            h.shorturl.send_404 $fd $word(1 $data)
        }
        ^dcc close raw $fd
        h.shorturl.connection_cleanup $fd
    }
}

alias h.shorturl.send_404 (fd, request) {

    # the headers
    msg =$fd HTTP/1.1 404 Not Found
    msg =$fd Date: $strftime(%z)
    msg =$fd Server: Hienoa
    msg =$fd Connection: close
    msg =$fd Content-Type: text/html\; charset=US-ASCII$chr(10)

    # the content
    msg =$fd <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
    msg =$fd <HTML><HEAD>
    msg =$fd <TITLE>404 Not Found</TITLE>
    msg =$fd </HEAD><BODY>
    msg =$fd <H1>Not Found</H1>
    msg =$fd The requested URL $request was not found on this server.<P>
    msg =$fd <HR>
    msg =$fd <ADDRESS>Hienoa/$h.version at Server $h.cfg.shorturl_host Port $h.shorturl.port</ADDRESS>
    msg =$fd </BODY></HTML>
}

alias h.shorturl.send_url (fd, url) {
    msg =$fd HTTP/1.1 302 Found
    msg =$fd Date: $strftime(%z)
    msg =$fd Server: Hienoa
    msg =$fd Location: $url$chr(10)
}

alias h.shorturl.connection_cleanup (fd) {
    on dcc_raw -"$fd % C"
    on dcc_raw -"$fd % D *"
    timer -d web_$fd
}

# vim: set ai tw=75 sw=4 et:
