# Copyright (c) 2001-2002 Upi Tamminen <desaster@dragonlight.fi>
# See the COPYRIGHT file for more information

# h.userlist.user = 1
# h.userlist.user.flags
# h.userlist.user.password(encrypted)
# h.userlist.user.channels.channel(encoded) = 1
# h.userlist.user.channels.channel.flags
# h.userlist.user.hosts

package userlist

config_title "Userlist configuration"
config_entry "Save userlist automatically" type "check" var "h.cfg.userlist_save" def "1"
config_entry "Auto-op delay in seconds" type "text" var "h.cfg.aop_delay" def "5"

eval on #-invite $hash_32bit(userlist) "*" {
    @ :h.user = h.userlist.getuser($0!$userhost())
    if (h.user && h.userlist.hasflag(i $h.user $1)) {
	join $1
    }
}

eval on #-hook $hash_32bit(userlist) "mode_stripped *" {
    if ([$1] == servernick() || !ischannel($2)) { return }
    switch ($3) {
	(-o) {
	    if ([$1] == [$4]) { continue }
	    @ :h.user = h.userlist.getuser($4!$h.uh($4))
	    if (h.user && h.userlist.hasflag(p $h.user $h.channel) && \
		    h.userlist.hasflag(o $h.user $h.channel) && \
		    ischanop($servernick() $h.channel) == 1) {
		//mode $2 +o $4
	    }
	}
	(-v) {
	    if ([$1] == [$4]) { continue }
	    @ :h.user = h.userlist.getuser($4!$h.uh($4))
	    if (h.user && h.userlist.hasflag(p $h.user $h.channel) && \
		    h.userlist.hasflag(v $h.user $h.channel) && \
		    ischanop($servernick() $h.channel) == 1) {
		//mode $2 +v $4
	    }
	}
    }
}

eval on #-311 $hash_32bit(userlist) "*" {
    if (:h.user = h.userlist.getuser($1!$2@$3)) {
	@ :h.flags = h.userlist[$h.encode($h.user)][flags]
	@ :h.flags = h.flags ? h.flags : [none]
	foreach h.userlist.${h.encode($h.user)}.channels h.channel {
	    push :h.channels $decode($h.channel)
	}
	h.format.parse whois_userlist $0-1 $h.user $h.flags $h.channels
    }
}

eval on #-ctcp $hash_32bit(userlist) "*" {
    @ :h.user = h.userlist.getuser($0!$h.uh($0))
    if (!h.user || !h.userlist.hasflag(c $h.user)) { return }
    switch ($2) {
	(pass) (password) { h.userlist.ctcp_password $0 $h.user $3- }
	(op) (ops) { h.userlist.ctcp_op $0 $h.user $3- }
	(voice) { h.userlist.ctcp_voice $0 $h.user $3- }
	(whoami) { h.userlist.ctcp_whoami $0 $h.user }
    }
}

eval on #-join $hash_32bit(userlist) "*" {
    if ([$0] == N || !ischanop($N $1)) { return }
    if (!(:h.user = h.userlist.getuser($0!$2))) { return }
    if (h.userlist.hasflag(b $h.user $1)) { ban $1 $0 }
    if (h.userlist.hasflag(k $h.user $1)) {
	kick $1 $0
	return
    }
    if (h.userlist.hasflag(a $h.user $1)) {
	if (h.userlist.hasflag(o $h.user $1)) {
	    if (h.cfg.aop_delay) {
		timer $h.cfg.aop_delay {
		    unless (ischanop($0 $1)) { //mode $1 +o $0 }
		}
	    } else {
		unless (ischanop($0 $1)) { //mode $1 +o $0 }
	    }
	} elsif (h.userlist.hasflag(v $h.user $1)) {
	    unless (ischanvoice($0 $1) > 0) { //mode $1 +v $0 }
	}
    }
}

alias unuser deluser
alias userdel deluser
alias deluser (h.user, ...) {
    if (!h.user) {
	xecho -b Usage: /deluser <user>
	return
    }
    if (!h[userlist][$h.encode($h.user)]) {
	xecho -b No such user
	return
    }
    xecho -say -b Removing user $h.user
    foreach h.userlist.${h.encode($h.user)}.channels h.v {
	^assign -h.userlist.${h.encode($h.user)}.channels.${h.v}.flags
	^assign -h.userlist.${h.encode($h.user)}.channels.${h.v}
    }
    foreach h.userlist.${h.encode($h.user)} h.v {
	^assign -h.userlist.${h.encode($h.user)}.${h.v}
    }
    ^assign -h.userlist.${h.encode($h.user)}
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias useradd adduser
alias adduser (h.user, h.args) {
    if (!h.user) {
	xecho -b Usage: /adduser <user> [+flag(s)] [#channel(s)] [+flag(s)] [hostmask(s)]
	return
    }
    if (h[userlist][$h.encode($h.user)]) {
	xecho -b $h.user already exists
	return
    } else {
	xecho -say $G Adding user $h.user
	@ h[userlist][$h.encode($h.user)] = 1
    }
    while (:h.w = shift(h.args)) {
	if (h.w =~ [#%]) {
	    @ :h.channel = h.w
	    ^addchannel $h.user $h.w
	    continue
	}
	if (h.w =~ [?%!?%@?%]) {
	    ^addhost $h.user $h.w
	    continue
	}
	if (h.w =~ [+%]) {
	    ^userflags $h.user${h.channel ? [ $h.channel ] : [ ]}$h.w
	}
    }
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias +host addhost
alias hostadd addhost
alias addhost (h.user, h.hosts) {
    if (!h.hosts) {
	echo $G Usage: /addhost <user> [hostmask(s)]
	return
    }
    if (!h[userlist][$h.encode($h.user)]) {
	echo $G User $h.user does not exist
	return
    }
    @ :h.var = [h.userlist.${h.encode($h.user)}.hosts]
    @ $h.var = uniq($($h.var) $pattern(%!%@% $h.hosts))
    @ :h.hosts = [$($h.var)] ? [$($h.var)] : [none]
    xecho -say $G Hostmasks for $h.user are now: $h.hosts
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias -host delhost
alias hostdel delhost
alias delhost (h.user, h.hosts) {
    if (!h.hosts) {
	echo $G Usage: /delhost <user> [hostmask(s)]
	return
    }
    if (!h[userlist][$h.encode($h.user)]) {
	echo $G User $h.user does not exist
	return
    }
    @ :h.var = [h.userlist.${h.encode($h.user)}.hosts]
    @ $h.var = remws($h.hosts / $($h.var))
    @ :h.hosts = [$($h.var)] ? [$($h.var)] : [none]
    xecho -say -b Hostmasks for $h.user are now: $h.hosts
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias +channel addchannel
alias addchannel (h.user, h.channels) {
    if (!h.channels) {
	echo $G Usage: /addchannel <user> [channel(s)]
	return
    }
    if (!h[userlist][$h.encode($h.user)]) {
	echo $G User $h.user does not exist
	return
    }
    fe ($pattern(#?% $h.channels)) h.channel {
	@ h[userlist][$h.encode($h.user)][channels][$h.encode($h.channel)] = 1
    }
    foreach h.userlist.${h.encode($h.user)}.channels h.channel {
	push :h.l $decode($h.channel)
    }
    xecho -say -b Channels for $h.user are now: ${h.l ? h.l : [any]}
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias delchannel (h.user, h.channels) {
    if (!h.channels) {
	echo $G Usage: /delchan <user> [channel(s)]
	return
    }
    if (!h[userlist][$h.encode($h.user)]) {
	echo $G User $h.user does not exist
	return
    }
    fe ($h.channels) h.channel {
	^assign -h[userlist][$h.encode($h.user)][channels][$h.encode($h.channel)][flags]
	^assign -h[userlist][$h.encode($h.user)][channels][$h.encode($h.channel)]
    }
    foreach h.userlist.${h.encode($h.user)}.channels h.channel {
	push :h.l $decode($h.channel)
    }
    xecho -say -b Channels for $h.user are now: ${h.l ? h.l : [any]}
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias flags userflags
alias setflags userflags
alias chattr userflags
alias userflags (h.user, h.args) {
    if (!h.args) {
	echo $G Usage: /userflags <user> [channel] <+flags>
	return
    }
    if (!h[userlist][$h.encode($h.user)]) {
	echo $G User $h.user does not exist
	return
    }
    while (:h.w = shift(h.args)) {
	if (h.w =~ [#%]) {
	    @ :h.channel = h.w
	    continue
	}
	@ :h.add = 1
	@ :h.w = (strlen($h.channel) ? \
	    pass(coavbkpi-+ $h.w) : \
	    pass(cdoavbkpi-+ $h.w))
	fec ($h.w) h.c {
	    if (h.c != [+] && h.c != [-]) {
		@ :h.var = [h.userlist.${h.encode($h.user)}.] ## (h.channel ? \
		    [channels.${h.encode($h.channel)}.] : []) ## [flags]
		if (h.add && [$($h.var)] !~ [%$h.c%]) {
		    @ $h.var = [$($h.var)$h.c]
		} elsif (!h.add && [$($h.var)] =~ [%$h.c%]) {
		    @ $h.var = tr(/$h.c//$($h.var))
		}
		@ :h.flags_changed = 1
		continue
	    }
	    if (h.c == [+]) { @ :h.add = 1 }
	    if (h.c == [-]) { @ :h.add = 0 }
	}
    }
    if (h.cfg.userlist_save) { h.userlist.save }
    if (h.flags_changed) {
	xecho -say -b Flags for $h.user changed
    } else {
	xecho -say -b No flags for $h.user changed
    }
}

alias ul userlist
alias listusers userlist
alias userlist (h.pattern) {
    if (!aliasctl(assign match h.userlist.)) {
	xecho -b Userlist is empty
	return
    }
    foreach h.userlist h.user_encoded {
	@ :h.user = decode($h.user_encoded)
	if (h.pattern && h.user !~ [$h.pattern]) { continue }
	@ :h.var = [h.userlist.${h.user_encoded}]
	@ :h.flags = [$(${h.var}.flags)]
	@ :h.l = [$tolower($h.user)${h.flags ? [\(+$h.flags\)] : []}]
	@ :h.password = h[userlist][$h.user_encoded][password] ? [yes] : [no]
	@ :h.l #= [ \[pwd:$h.password\]]
	if (aliasctl(assign match ${h.var}.channels.)) {
	    foreach ${h.var}.channels h.channel {
		@ :h.l #= [ $decode($h.channel)]
		@ :h.flags = [$(${h.var}.channels.${h.channel}.flags)]
		if (h.flags) { @ :h.l #= [\(+$h.flags\)] }
	    }
	} else { @ :h.l #= [ *] }
	@ :h.hosts = [$(${h.var}.hosts)] ? [$(${h.var}.hosts)] : [no hosts]
	xecho -b * $h.l
	xecho -b   [$h.hosts]
    }
}

alias h.userlist.save {
    @ unlink(~/.hienoa/userlist)
    @ :h.f = open(~/.hienoa/userlist W)
    @ write($h.f # hienoa userlist V3 \($stime($time())\)$chr(10))
    foreach h.userlist h.user {
	@ :h.args = decode($h.user)
	if (h[userlist][$h.user][flags]) {
	    push :h.args +$h[userlist][$h.user][flags]
	}
	foreach h.userlist.${h.user}.channels h.channel {
	    push :h.args $decode($h.channel)
	    @ :h.flags = h[userlist][$h.user][channels][$h.channel][flags]
	    if (h.flags) { push :h.args +$h.flags }
	}
	if (h[userlist][$h.user][hosts]) {
	    push :h.args $h[userlist][$h.user][hosts]
	}
	if (h[userlist][$h.user][password]) {
	    @ :h.args #= chr(10) ## [^setpassword $tolower($decode($h.user)) ]
	    @ :h.args #= [nocrypt ${h[userlist][$h.user][password]}]
	}
	@ write($h.f ^adduser $h.args)
    }
    @ close($h.f)
}

alias setpassword (h.user, h.password) {
    if (!h.password) {
	xecho -b Usage: /setpassword <user> [nocrypt] <password>
	return
    } elsif (!h[userlist][$h.encode($h.user)]) {
	xecho -b No such user!
	return
    }
    if (word(0 $h.password) == [nocrypt] && numwords($h.password) > 1) {
	@ h[userlist][$h.encode($h.user)][password] = restw(1 $h.password)
    } else {
	@ :h.rand = rand(89) + 10
	@ h[userlist][$h.encode($h.user)][password] = crypt($h.password $h.rand)
    }
    xecho -say -b Password for $h.user changed
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias delpassword (h.user, ...) {
    if (!h.user) {
	xecho -b Usage: /delpassword <user>
    } elsif (!h[userlist][$h.encode($h.user)]) {
	xecho -b No such user!
	return
    } else {
	^assign -h.userlist.${h.encode($h.user)}.password
	xecho -say -b Removed $h.user's password
    }
    if (h.cfg.userlist_save) { h.userlist.save }
}

alias h.userlist.getuser (h.host) {
    foreach h.userlist h.user {
	if (!h[userlist][$h.user][hosts]) { continue }
	if (rmatch($h.host $h.userlist[$h.user][hosts])) {
	    return $decode($h.user)
	}
    }
}

alias h.userlist.hasflag (h.flag, h.user, h.channel) {
    if (!h[userlist][$h.encode($h.user)]) { return 0 }
    @ :h.flags = h[userlist][$h.encode($h.user)][flags]
    if (:h.channel = h.encode($h.channel)) {
	if (h[userlist][$h.encode($h.user)][channels][$h.channel][flags]) {
	    @ :h.flags #= \
		h[userlist][$h.encode($h.user)][channels][$h.channel][flags]
	}
    }
    if (match(*$h.flag* $h.flags)) { return 1 } else { return 0 }
}

alias h.userlist.checkpassword (h.user, h.password) {
    if (!h[userlist][$h.encode($h.user)][password]) { return 0 }
    if (crypt($h.password $left(2 $h[userlist][$h.encode($h.user)][password])) == \
	h[userlist][$h.encode($h.user)][password]) {
	    return 1
	} else {
	    return 0
	}
}

alias h.userlist.ctcp_password (h.nick, h.user, h.pass1, h.pass2, ...) {
    if (!h.pass1) {
	//notice $h.nick Usage: /CTCP $N PASSWORD [oldpassword] <newpassword>
    } elsif (h.pass2 && !h[userlist][$h.encode($h.user)][password]) {
	//notice $h.nick You don't have password yet
    } elsif (h.pass2 && h[userlist][$h.encode($h.user)][password] && \
	    h.userlist.checkpassword($h.user $h.pass1)) {
	^setpassword $h.user $h.pass2
	//notice $h.nick Password changed
    } elsif (!h.pass2 && !h[userlist][$h.encode($h.user)][password]) {
	^setpassword $h.user $h.pass1
	//notice $h.nick Password saved
    } else {
	//notice $h.nick Incorrect password
    }
}

alias h.userlist.ctcp_op (h.nick, h.user, h.channel, h.password, ...) {
    if (!h.password && !ischannel($h.channel)) {
	//notice $h.nick Usage: /CTCP $N OP <#channel> <password>
    } elsif (h.userlist.checkpassword($h.user $h.password)) {
	if (ischanop($h.nick $h.channel)) { break }
	if (h.userlist.hasflag(o $h.user $h.channel)) {
	    //mode $h.channel +o $h.nick
	} else {
	    //notice $h.nick You have no access
	}
    } else {
	//notice $h.nick Incorrect password
    }
}

alias h.userlist.ctcp_voice (h.nick, h.user, h.channel, h.password, ...) {
    if (!h.password && !ischannel($h.channel)) {
	//notice $h.nick Usage: /CTCP $N VOICE <#channel> <password>
    } elsif (h.userlist.checkpassword($h.user $h.password)) {
	if (ischanop($h.nick $h.channel)) { break }
	if (h.userlist.hasflag(v $h.user $h.channel)) {
	    //mode $h.channel +v $h.nick
	} else {
	    //notice $h.nick All your base are belong to us
	}
    } else {
	//notice $h.nick Incorrect password
    }
}

alias h.userlist.ctcp_whoami (h.nick, h.user) {
    @ :h.flags = h[userlist][$h.encode($h.user)][flags] ? \
	[\(+] ## h[userlist][$h.encode($h.user)][flags] ## [\)] : []
    @ :h.hosts = h[userlist][$h.encode($h.user)][hosts] ? \
	h[userlist][$h.encode($h.user)][hosts] : [none]
    foreach h.userlist.${h.encode($h.user)}.channels h.channel {
	push :h.channels $decode($h.channel)
	if (!h[userlist][$h.encode($h.user)][channels][$h.channel][flags]) {
	    continue
	}
	@ :h.channels #= [\(+] ## \
	    h[userlist][$h.encode($h.user)][channels][$h.channel][flags] ## \
	    [\)]
    }
    if (!h.channels) { @ :h.channels = [any] }
    notice $h.nick User: $h.user$h.flags
    notice $h.nick Channels: $h.channels
    notice $h.nick Hosts: $h.hosts
}

if (fexist(~/.hienoa/userlist) == 1) {
    @ :h.f = open(~/.hienoa/userlist R)
    @ :h.l = read($h.f)
    @ close($h.f)
    stack push assign h.cfg.userlist_save
    if (h.l !~ [* V3*]) {
	load $h.path/etc/cvul.irc
    } else {
	load ~/.hienoa/userlist
    }
    stack pop assign h.cfg.userlist_save
}

# vim: set ai tw=75 sw=4:
